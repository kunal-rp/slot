syntax = "proto3";

package task;

option java_package = "com.task";
option java_outer_classname = "TaskProto";


//Template specifying details for recurring tasks 
message TaskTemplate {
    int32 template_id = 1;

    // Duration for task in seconds
    int32 duration = 2;

    TaskDetails details = 3;

    // project id's for project 
    repeated int32 parent_project_id = 4;

    // Time policy to generate occurances for task entries 
    RecurringTimePolicy time_configuration = 5;

    // Data collection ids for template
    // will be referenced when creating  
    repeated int32 data_collection_id = 6;

}

message TaskEntry {

    oneof id {

        int32 entry_id = 1;

        // for generated entries from template this is set 
        int32 generated_entry_id = 12;
    }

    TaskDetails details = 2;

    // Template that entry is based off of 
    int32 template_id = 3;

    // for reoccuring tasks, store what occurance number of task this is
    int32 occurance = 4;

    //unix timemstamp of this specific entry
    //Required b/c it is easier to save into entry upon creation rather than calculating the start time per recurring template id occurance
    int64 start_timestamp = 5;

    //unix duration of task 
    //Required b/c it is easier to save into entry upon creation rather than calculating the start time per recurring template id occurance
    int64 duration = 6;

    //Entry specific information
    // Alterations to time for specific entry, would be set by user ( usually in real time)
    // Even one time tasks can use these time alterations s.t. origional start time and duration are saved on file
    TimeAlteractionPolicy time_alterations = 7;

    // Project's to include this specific entry & not the template  
    // Main use case would be for single entry in recurring tasks
    repeated int32 additional_project_ids = 8;

    // Additional Data collection to occur for this specific entry  
    // Main use case would be for single entry in recurring tasks
    repeated int32 additional_data_collection_ids = 9;

    // Values from data collection policies
    DataCollectionValue data_collection_value = 10;

    enum TaskStatus {
        ACTIVE = 0;
        COMPLETED = 1;
        INCOMPLETE = 2;
    }
    TaskStatus status = 11; 

}

message TaskDetails { 
    string title = 1;
    string description = 2;
}

message RecurringTimePolicy {
    // Timestamp indicating when to start creating tasks
    int64 start_timestamp = 1;
    // Interval indicating the start times for each task entry 
    int64 interval_seconds = 2;

    // Timestamp indicating max possible timestamp to create entries 
    // If null, create tasks indefinently
    int64 end_timestamp = 3;

    //TODO : restrictions to allow control based on hour/day/week/month
}

// Serverside 
message DataCollection {

    // id for particular data collection
    // in cases where data colleciton changes for a task, new Data Collection is created, 
    // whose new id will be used to check for 
    int32 data_collection_id = 1;

    repeated DataCollectionPolicy policy = 2;
}

message DataCollectionPolicy {

    // Key to store data value with for task entry
    // this should be unique 
    string key = 1;

    string prompt = 2; 
    enum CollectionType {
        MARKDOWN = 0;
        BOOLEAN = 1;
        INT = 2;
        // TODO: allow for radio selection w/ harcoded values
    }
    CollectionType collection_type = 3;

    // TODO: predicate to allow for conditional show based on input from other values
    // i.e. - workout project will have DC asking for workout_type ; Push , Pull, Leg, other
    //      - create daily task for workout @ 7; iff workout_type == Push, ask for total pushups
}

message DataCollectionValue {

    repeated SingleDataCollectionValue sing_data_collection_value = 1;
}

message SingleDataCollectionValue{

    int32 data_collection_id = 1;

    // selection values would have multiple values w/ the same key and different values 
    repeated DataCollectionPolicyValue value = 2;
}

message DataCollectionPolicyValue {
    string key = 1;

    oneof collection_value {
        int32 int_value = 2;
        string string_value = 3;
        bool boolean_value = 4;
    }
}

message TimeAlteractionPolicy{
    int64 start_timestamp_surplus = 1;
    int64 duration_surplus = 2;
}


message Project {
    
    int32 project_id = 1;

    string tag = 2; 

    string description = 3; 

    repeated int32 data_collection_id = 4;

    repeated int32 sub_project_id = 5; 

}